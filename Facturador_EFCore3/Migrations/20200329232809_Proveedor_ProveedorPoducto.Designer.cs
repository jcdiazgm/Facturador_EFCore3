// <auto-generated />
using System;
using Facturador_EFCore3.Modelos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Facturador_EFCore3.Migrations
{
    [DbContext(typeof(FacturadorDBContext))]
    [Migration("20200329232809_Proveedor_ProveedorPoducto")]
    partial class Proveedor_ProveedorPoducto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Facturador_EFCore3.Modelos.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Telefonos")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Correo = "juan.rulfo@efc3.com",
                            Direccion = "Calle 1 Cra 1",
                            Documento = "11111",
                            Nombre = "Juan Rulfo",
                            Telefonos = "3011111111"
                        },
                        new
                        {
                            Id = 2,
                            Correo = "pedro.paramo@efc3.com",
                            Direccion = "Calle 2 Cra 2",
                            Documento = "22222",
                            Nombre = "Pedro Páramo",
                            Telefonos = "3022222222"
                        },
                        new
                        {
                            Id = 3,
                            Correo = "rosario.tijeras@efc3.com",
                            Direccion = "Calle 3 Cra 3",
                            Documento = "33333",
                            Nombre = "Rosario Tijeras",
                            Telefonos = "3033333333"
                        },
                        new
                        {
                            Id = 4,
                            Correo = "alicia.adorada@efc3.com",
                            Direccion = "Calle 4 Cra 4",
                            Documento = "44444",
                            Nombre = "Alicia Adoorada",
                            Telefonos = "3044444444"
                        },
                        new
                        {
                            Id = 5,
                            Correo = "juancho.polo@efc3.com",
                            Direccion = "Calle 5 Cra 5",
                            Documento = "55555",
                            Nombre = "Juancho Polo",
                            Telefonos = "3055555555"
                        });
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.ClienteCredito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Credito")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Creditos");
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("FacturaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FchEmision")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FacturaId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.FacturaDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(12,2)")
                        .HasComputedColumnSql("[Cantidad] * [Precio]");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("FacturaDetalle");
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Para iluminar tu vida",
                            Nombre = "Lámpara",
                            Precio = 40.99m
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Para esparcimiento",
                            Nombre = "Tableta Inteligente",
                            Precio = 180.99m
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Para trabajo",
                            Nombre = "Laptop",
                            Precio = 250m
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Para trabajar comodamente",
                            Nombre = "Mouse Microsoft",
                            Precio = 98.89m
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Para tus copias de respaldo",
                            Nombre = "Disco Externo",
                            Precio = 75.50m
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Para comunicaciones en línea",
                            Nombre = "Diadema con microfono",
                            Precio = 15.99m
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Para imprimir los trabajos",
                            Nombre = "Impresora laser",
                            Precio = 65.99m
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Para digitalizar los documentos",
                            Nombre = "Escanner",
                            Precio = 50.45m
                        });
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.ProveedorProducto", b =>
                {
                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("ProveedorId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProveedorProductos");
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.ClienteCredito", b =>
                {
                    b.HasOne("Facturador_EFCore3.Modelos.Cliente", null)
                        .WithOne("Credito")
                        .HasForeignKey("Facturador_EFCore3.Modelos.ClienteCredito", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.Factura", b =>
                {
                    b.HasOne("Facturador_EFCore3.Modelos.Cliente", null)
                        .WithMany("Facturas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facturador_EFCore3.Modelos.Factura", null)
                        .WithMany("Facturas")
                        .HasForeignKey("FacturaId");
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.FacturaDetalle", b =>
                {
                    b.HasOne("Facturador_EFCore3.Modelos.Factura", "Factura")
                        .WithMany("Detalle")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facturador_EFCore3.Modelos.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Facturador_EFCore3.Modelos.ProveedorProducto", b =>
                {
                    b.HasOne("Facturador_EFCore3.Modelos.Producto", "Producto")
                        .WithMany("ProveedorProductos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facturador_EFCore3.Modelos.Proveedor", "Proveedor")
                        .WithMany("ProveedorProductos")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
